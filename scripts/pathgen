#!/bin/bash -euE
# generates "${_ROOT}/${_CONTENT_PATH}"

IFS=$'\n\t'
source "$(dirname "$0")/_configure"

_NAME_SPACE=Nez

cd "${_ROOT}/${_CONTENT_PROJ}"

_print_indent() {
    for __ in $(seq ${1}) ; do
        printf '    '
    done
}

_standarize() {
    printf "${1}" | sed 's/^static/@Static/g' | gsed 's/.*/\u&/' | sed 's/\..*$//g'
    # TODO: enable other names that are hidden by keywords
}

_start_class() {
    _print_indent "${2}"
    printf '%s\n' "public static class ${1} {"
}

_end_class() {
    _print_indent "$((${1}))"
    printf '%s\n' '}'
}

_rec_dir() {
    local _next_dir="${1}"
    local _indent="${2}"
    local _basepath="${3}"

    cd "${_next_dir}"
    _start_class "${_next_dir}" "${_indent}"
    _indent=$(($_indent+1))

    # files
    for __file in $(fd -t f -d 1) ; do
        # print file name as a field
        local _name="$(_standarize "${__file}")"
        _print_indent "${_indent}"
        printf '%s\n' "public static readonly string ${_name} = \"${_basepath}/${__file}\";"
    done

    # directories
    for __dir in $(fd -t d -d 1) ; do
        _rec_dir "${__dir}" "$(($_indent))" "${_basepath}/${__dir}"
    done

    _indent=$(($_indent-1))
    _end_class "${_indent}"
    cd ../
}

printf '%s\n' "namespace ${_NAME_SPACE} {"
_rec_dir Content 1 Content
printf '%s\n' '}'
